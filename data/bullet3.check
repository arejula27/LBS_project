analyze/bullet3/examples/OpenCL/rigidbody/GpuConvexScene.cpp:421    "int result = sscanf(node, "%d %d %d %d", &nnode, &ndims, &nattrb, &hasbounds);"
analyze/bullet3/examples/OpenCL/rigidbody/GpuConvexScene.cpp:422    "result = sscanf(node, "%d %d %d %d", &nnode, &ndims, &nattrb, &hasbounds);"
analyze/bullet3/examples/OpenCL/rigidbody/GpuConvexScene.cpp:434    "sscanf(node, "%d %f %f %f", &index, &x, &y, &z);"
analyze/bullet3/examples/OpenCL/rigidbody/GpuConvexScene.cpp:456    "sscanf(ele, "%d %d %d", &ntetra, &ncorner, &neattrb);"
analyze/bullet3/examples/OpenCL/rigidbody/GpuConvexScene.cpp:467    "sscanf(ele, "%d %d %d %d %d", &index, &ni[0], &ni[1], &ni[2], &ni[3]);"
analyze/bullet3/examples/Heightfield/HeightfieldExample.cpp:555    "if(sscanf(value, "%lf", &v) == 1)"
analyze/bullet3/examples/TinyAudio/RtAudio.cpp:7606    "strcpy(name, "default");"
analyze/bullet3/examples/TinyAudio/RtAudio.cpp:7935    "strcpy(name, "default");"
analyze/bullet3/examples/Importers/ImportMJCFDemo/ImportMJCFSetup.cpp:98    "//warning: we don't avoid string buffer overflow in this basic example in fscanf"
analyze/bullet3/examples/Importers/ImportMJCFDemo/ImportMJCFSetup.cpp:102    "result = fscanf(f, "%s", fileName);"
analyze/bullet3/examples/Importers/ImportSDFDemo/ImportSDFSetup.cpp:104    "//warning: we don't avoid string buffer overflow in this basic example in fscanf"
analyze/bullet3/examples/Importers/ImportSDFDemo/ImportSDFSetup.cpp:108    "result = fscanf(f, "%s", fileName);"
analyze/bullet3/examples/Importers/ImportBsp/BspLoader.cpp:169    "sscanf(k, "%f %f %f", &vec[0], &vec[1], &vec[2]);"
analyze/bullet3/examples/Importers/ImportBsp/BspLoader.cpp:188    "strcpy(script->filename, "memory buffer");"
analyze/bullet3/examples/Importers/ImportBsp/BspLoader.cpp:347    "strcpy(b, s);"
analyze/bullet3/examples/Importers/ImportURDFDemo/ImportURDFSetup.cpp:109    "//warning: we don't avoid string buffer overflow in this basic example in fscanf"
analyze/bullet3/examples/Importers/ImportURDFDemo/ImportURDFSetup.cpp:113    "result = fscanf(f, "%s", fileName);"
analyze/bullet3/examples/Utils/b3ResourcePath.cpp:80    "strcpy(sAdditionalSearchPath, path);"
analyze/bullet3/examples/ThirdPartyLibs/lua-5.2.3/src/liolib.c:343    "if (fscanf(f, LUA_NUMBER_SCAN, &d) == 1)"
analyze/bullet3/examples/ThirdPartyLibs/lua-5.2.3/src/lstrlib.c:975    "static const char *scanformat(lua_State *L, const char *strfrmt, char *form)"
analyze/bullet3/examples/ThirdPartyLibs/lua-5.2.3/src/lstrlib.c:1006    "strcpy(form + l - 1, lenmod);"
analyze/bullet3/examples/ThirdPartyLibs/lua-5.2.3/src/lstrlib.c:1033    "strfrmt = scanformat(L, strfrmt, form);"
analyze/bullet3/examples/ThirdPartyLibs/lua-5.2.3/src/loslib.c:53    "strcpy(b, "/tmp/lua_XXXXXX"); \"
analyze/bullet3/examples/ThirdPartyLibs/glad/egl.c:16    "#define GLAD_IMPL_UTIL_SSCANF sscanf_s"
analyze/bullet3/examples/ThirdPartyLibs/glad/egl.c:18    "#define GLAD_IMPL_UTIL_SSCANF sscanf"
analyze/bullet3/examples/ThirdPartyLibs/glad/egl.c:269    "GLAD_IMPL_UTIL_SSCANF(version, "%d.%d", &major, &minor);"
analyze/bullet3/examples/ThirdPartyLibs/glad/gl.c:16    "#define GLAD_IMPL_UTIL_SSCANF sscanf_s"
analyze/bullet3/examples/ThirdPartyLibs/glad/gl.c:18    "#define GLAD_IMPL_UTIL_SSCANF sscanf"
analyze/bullet3/examples/ThirdPartyLibs/glad/gl.c:2378    "GLAD_IMPL_UTIL_SSCANF(version, "%d.%d", &major, &minor);"
analyze/bullet3/examples/ThirdPartyLibs/glad/glx.c:72    "#define GLAD_IMPL_UTIL_SSCANF sscanf_s"
analyze/bullet3/examples/ThirdPartyLibs/glad/glx.c:74    "#define GLAD_IMPL_UTIL_SSCANF sscanf"
analyze/bullet3/examples/ThirdPartyLibs/tinyxml2/tinyxml2.cpp:60    "#define TIXML_SSCANF sscanf_s"
analyze/bullet3/examples/ThirdPartyLibs/tinyxml2/tinyxml2.cpp:65    "#define TIXML_SSCANF sscanf"
analyze/bullet3/examples/ThirdPartyLibs/tinyxml2/tinyxml2.cpp:102    "#define TIXML_SSCANF sscanf"
analyze/bullet3/examples/ThirdPartyLibs/tinyxml2/tinyxml2.cpp:625    "if (TIXML_SSCANF(str, "%d", value) == 1)"
analyze/bullet3/examples/ThirdPartyLibs/tinyxml2/tinyxml2.cpp:634    "if (TIXML_SSCANF(str, "%u", value) == 1)"
analyze/bullet3/examples/ThirdPartyLibs/tinyxml2/tinyxml2.cpp:664    "if (TIXML_SSCANF(str, "%f", value) == 1)"
analyze/bullet3/examples/ThirdPartyLibs/tinyxml2/tinyxml2.cpp:673    "if (TIXML_SSCANF(str, "%lf", value) == 1)"
analyze/bullet3/examples/ThirdPartyLibs/tinyxml2/tinyxml2.cpp:683    "if (TIXML_SSCANF(str, "%lld", &v) == 1)"
analyze/bullet3/examples/ThirdPartyLibs/zlib/gzlib.c:226    "strcpy(state->path, path);"
analyze/bullet3/examples/ThirdPartyLibs/zlib/gzlib.c:622    "strcpy(state->msg, state->path);"
analyze/bullet3/examples/ThirdPartyLibs/imgui/imgui_demo.cpp:28    "#include <stdio.h>                         // vsnprintf, sscanf, printf"
analyze/bullet3/examples/ThirdPartyLibs/imgui/imgui_demo.cpp:37    "#pragma warning(disable : 4996)  // 'This function or variable may be unsafe': strcpy, strdup, sprintf, vsnprintf, sscanf, fopen"
analyze/bullet3/examples/ThirdPartyLibs/imgui/imgui_demo.cpp:37    "#pragma warning(disable : 4996)  // 'This function or variable may be unsafe': strcpy, strdup, sprintf, vsnprintf, sscanf, fopen"
analyze/bullet3/examples/ThirdPartyLibs/imgui/imgui_demo.cpp:3113    "strcpy(InputBuf, "");"
analyze/bullet3/examples/ThirdPartyLibs/imgui/imgui_draw.cpp:20    "#include <stdio.h>  // vsnprintf, sscanf, printf"
analyze/bullet3/examples/ThirdPartyLibs/imgui/imgui_draw.cpp:36    "#pragma warning(disable : 4996)  // 'This function or variable may be unsafe': strcpy, strdup, sprintf, vsnprintf, sscanf, fopen"
analyze/bullet3/examples/ThirdPartyLibs/imgui/imgui_draw.cpp:36    "#pragma warning(disable : 4996)  // 'This function or variable may be unsafe': strcpy, strdup, sprintf, vsnprintf, sscanf, fopen"
analyze/bullet3/examples/ThirdPartyLibs/imgui/imgui_draw.cpp:1635    "if (font_cfg.Name[0] == '\0') strcpy(font_cfg.Name, "ProggyClean.ttf, 13px");"
analyze/bullet3/examples/ThirdPartyLibs/imgui/imgui.cpp:655    "#include <stdio.h>                         // vsnprintf, sscanf, printf"
analyze/bullet3/examples/ThirdPartyLibs/imgui/imgui.cpp:669    "#pragma warning(disable : 4996)  // 'This function or variable may be unsafe': strcpy, strdup, sprintf, vsnprintf, sscanf, fopen"
analyze/bullet3/examples/ThirdPartyLibs/imgui/imgui.cpp:669    "#pragma warning(disable : 4996)  // 'This function or variable may be unsafe': strcpy, strdup, sprintf, vsnprintf, sscanf, fopen"
analyze/bullet3/examples/ThirdPartyLibs/imgui/imgui.cpp:3652    "if (sscanf(line, "Pos=%f,%f", &x, &y) == 2)"
analyze/bullet3/examples/ThirdPartyLibs/imgui/imgui.cpp:3654    "else if (sscanf(line, "Size=%f,%f", &x, &y) == 2)"
analyze/bullet3/examples/ThirdPartyLibs/imgui/imgui.cpp:3656    "else if (sscanf(line, "Collapsed=%d", &i) == 1)"
analyze/bullet3/examples/ThirdPartyLibs/imgui/imgui.cpp:8639    "if (op && sscanf(initial_value_buf, scalar_format, &arg0i) < 1)"
analyze/bullet3/examples/ThirdPartyLibs/imgui/imgui.cpp:8646    "if (sscanf(buf, "%f", &arg1f) == 1) *v = (int)(arg0i + arg1f);"
analyze/bullet3/examples/ThirdPartyLibs/imgui/imgui.cpp:8650    "if (sscanf(buf, "%f", &arg1f) == 1) *v = (int)(arg0i * arg1f);"
analyze/bullet3/examples/ThirdPartyLibs/imgui/imgui.cpp:8654    "if (sscanf(buf, "%f", &arg1f) == 1 && arg1f != 0.0f) *v = (int)(arg0i / arg1f);"
analyze/bullet3/examples/ThirdPartyLibs/imgui/imgui.cpp:8658    "if (sscanf(buf, scalar_format, &arg0i) == 1) *v = arg0i;"
analyze/bullet3/examples/ThirdPartyLibs/imgui/imgui.cpp:8664    "// For floats we have to ignore format with precision (e.g. "%.2f") because sscanf doesn't take them in"
analyze/bullet3/examples/ThirdPartyLibs/imgui/imgui.cpp:8669    "if (op && sscanf(initial_value_buf, scalar_format, &arg0f) < 1)"
analyze/bullet3/examples/ThirdPartyLibs/imgui/imgui.cpp:8673    "if (sscanf(buf, scalar_format, &arg1f) < 1)"
analyze/bullet3/examples/ThirdPartyLibs/imgui/imgui.cpp:10789    "strcpy(display_format, "%f");  // Ideally we'd have a minimum decimal precision of 1 to visually denote that this is a float, while hiding non-significant digits? %f doesn't have a minimum of 1"
analyze/bullet3/examples/ThirdPartyLibs/imgui/imgui.cpp:11949    "sscanf(p, "%02X%02X%02X%02X", (unsigned int*)&i[0], (unsigned int*)&i[1], (unsigned int*)&i[2], (unsigned int*)&i[3]);  // Treat at unsigned (%X is unsigned)"
analyze/bullet3/examples/ThirdPartyLibs/imgui/imgui.cpp:11951    "sscanf(p, "%02X%02X%02X", (unsigned int*)&i[0], (unsigned int*)&i[1], (unsigned int*)&i[2]);"
analyze/bullet3/examples/ThirdPartyLibs/Wavefront/tiny_obj_loader.cpp:443    "sscanf(token, "%s", namebuf);"
analyze/bullet3/examples/ThirdPartyLibs/Wavefront/tiny_obj_loader.cpp:769    "sscanf(token, "%s", namebuf);"
analyze/bullet3/examples/ThirdPartyLibs/Wavefront/tiny_obj_loader.cpp:788    "sscanf(token, "%s", namebuf);"
analyze/bullet3/examples/ThirdPartyLibs/Wavefront/tiny_obj_loader.cpp:851    "sscanf(token, "%s", namebuf);"
analyze/bullet3/examples/ThirdPartyLibs/stb_image/stb_image.cpp:4471    "// can't use sscanf() if we're not using stdio!"
analyze/bullet3/examples/ThirdPartyLibs/openvr/samples/shared/strtools.cpp:146    "void strcpy_safe(char *pchBuffer, size_t unBufferSizeBytes, const char *pchSource)"
analyze/bullet3/examples/SharedMemory/PhysicsServerCommandProcessor.cpp:4749    "if (sscanf(substr.c_str(), "%lf", &v) == 1)"
analyze/bullet3/examples/SharedMemory/PhysicsServerCommandProcessor.cpp:6913    "strcpy(serverStatusOut.m_userDataResponseArgs.m_key, userData->m_key.c_str());"
analyze/bullet3/examples/SharedMemory/PhysicsServerCommandProcessor.cpp:6951    "strcpy(userDataResponseArgs.m_key, addUserDataArgs.m_key);"
analyze/bullet3/examples/SharedMemory/PhysicsServerCommandProcessor.cpp:6960    "strcpy(userDataArgs.m_key, addUserDataArgs.m_key);"
analyze/bullet3/examples/SharedMemory/PhysicsServerCommandProcessor.cpp:7087    "strcpy(userDataArgs.m_key, userData->m_key.c_str());"
analyze/bullet3/examples/SharedMemory/PhysicsServerCommandProcessor.cpp:9011    "strcpy(serverStatusOut.m_dataStreamArguments.m_bodyName, bodyHandle->m_bodyName.c_str());"
analyze/bullet3/examples/SharedMemory/PhysicsServerCommandProcessor.cpp:9146    "strcpy(serverStatusOut.m_dataStreamArguments.m_bodyName, body->m_bodyName.c_str());"
analyze/bullet3/examples/SharedMemory/PhysicsServerCommandProcessor.cpp:9219    "strcpy(serverStatusOut.m_dataStreamArguments.m_bodyName, body->m_bodyName.c_str());"
analyze/bullet3/examples/SharedMemory/PhysicsServerCommandProcessor.cpp:10310    "strcpy(serverStatusOut.m_dataStreamArguments.m_bodyName, body->m_bodyName.c_str());"
analyze/bullet3/examples/SharedMemory/PhysicsServerCommandProcessor.cpp:10405    "strcpy(eventName, clientCmd.m_profile.m_name);"
analyze/bullet3/examples/SharedMemory/PhysicsServerCommandProcessor.cpp:14250    "strcpy(collisionShapeBuffer[0].m_meshAssetFileName, urdfCol->m_geometry.m_meshFileName.c_str());"
analyze/bullet3/examples/SharedMemory/PhysicsServerCommandProcessor.cpp:14316    "strcpy(collisionShapeBuffer[0].m_meshAssetFileName, urdfCol->m_geometry.m_meshFileName.c_str());"
analyze/bullet3/examples/SharedMemory/PhysicsClientSharedMemory.cpp:136    "strcpy(info.m_baseName, bodyJoints->m_baseName.c_str());"
analyze/bullet3/examples/SharedMemory/PhysicsClientSharedMemory.cpp:137    "strcpy(info.m_bodyName, bodyJoints->m_bodyName.c_str());"
analyze/bullet3/examples/SharedMemory/PhysicsClientSharedMemory.cpp:475    "strcpy(info.m_jointName, con->m_typeConstraintData.m_name);"
analyze/bullet3/examples/SharedMemory/PhysicsDirect.cpp:1528    "strcpy(info.m_baseName, bodyJoints->m_baseName.c_str());"
analyze/bullet3/examples/SharedMemory/PhysicsDirect.cpp:1529    "strcpy(info.m_bodyName, bodyJoints->m_bodyName.c_str());"
analyze/bullet3/examples/SharedMemory/PhysicsClientC_API.cpp:31    "strcpy(command->m_sdfArguments.m_sdfFileName, sdfFileName);"
analyze/bullet3/examples/SharedMemory/PhysicsClientC_API.cpp:54    "strcpy(command->m_sdfArguments.m_sdfFileName, sdfFileName);"
analyze/bullet3/examples/SharedMemory/PhysicsClientC_API.cpp:79    "strcpy(command->m_fileArguments.m_fileName, fileName);"
analyze/bullet3/examples/SharedMemory/PhysicsClientC_API.cpp:151    "strcpy(command->m_loadStateArguments.m_fileName, fileName);"
analyze/bullet3/examples/SharedMemory/PhysicsClientC_API.cpp:207    "strcpy(command->m_fileArguments.m_fileName, fileName);"
analyze/bullet3/examples/SharedMemory/PhysicsClientC_API.cpp:241    "strcpy(command->m_mjcfArguments.m_mjcfFileName, fileName);"
analyze/bullet3/examples/SharedMemory/PhysicsClientC_API.cpp:288    "strcpy(command->m_loadSoftBodyArguments.m_fileName, fileName);"
analyze/bullet3/examples/SharedMemory/PhysicsClientC_API.cpp:359    "strcpy(command->m_loadSoftBodyArguments.m_simFileName, filename);"
analyze/bullet3/examples/SharedMemory/PhysicsClientC_API.cpp:496    "strcpy(command->m_urdfArguments.m_urdfFileName, urdfFileName);"
analyze/bullet3/examples/SharedMemory/PhysicsClientC_API.cpp:518    "strcpy(command->m_urdfArguments.m_urdfFileName, urdfFileName);"
analyze/bullet3/examples/SharedMemory/PhysicsClientC_API.cpp:1693    "strcpy(command->m_createUserShapeArgs.m_shapes[shapeIndex].m_meshFileName, fileName);"
analyze/bullet3/examples/SharedMemory/PhysicsClientC_API.cpp:1810    "strcpy(command->m_createUserShapeArgs.m_shapes[shapeIndex].m_meshFileName, fileName);"
analyze/bullet3/examples/SharedMemory/PhysicsClientC_API.cpp:3153    "strcpy(command->m_customCommandArgs.m_pluginPath, pluginPath);"
analyze/bullet3/examples/SharedMemory/PhysicsClientC_API.cpp:3170    "strcpy(command->m_customCommandArgs.m_postFix, postFix);"
analyze/bullet3/examples/SharedMemory/PhysicsClientC_API.cpp:3245    "strcpy(command->m_customCommandArgs.m_arguments.m_text, textArguments);"
analyze/bullet3/examples/SharedMemory/PhysicsClientC_API.cpp:4106    "strcpy(command->m_addUserDataRequestArgs.m_key, key);"
analyze/bullet3/examples/SharedMemory/PhysicsClientC_API.cpp:4286    "strcpy(command->m_userDebugDrawArgs.m_text, txt);"
analyze/bullet3/examples/SharedMemory/PhysicsClientC_API.cpp:4366    "strcpy(command->m_userDebugDrawArgs.m_text, txt);"
analyze/bullet3/examples/SharedMemory/PhysicsClientC_API.cpp:5138    "strcpy(command->m_loadTextureArguments.m_textureFileName, filename);"
analyze/bullet3/examples/SharedMemory/PhysicsClientC_API.cpp:5927    "strcpy(command->m_profile.m_name, name);"
analyze/bullet3/examples/SharedMemory/PhysicsClientC_API.cpp:6003    "strcpy(command->m_stateLoggingArguments.m_fileName, fileName);"
analyze/bullet3/examples/SharedMemory/PhysicsClientC_API.cpp:6337    "strcpy(command->m_searchPathArgs.m_path, path);"
analyze/bullet3/examples/SharedMemory/PhysicsServerExample.cpp:1324    "strcpy(m_tmpText.m_text, txt);"
analyze/bullet3/examples/SharedMemory/PhysicsServerExample.cpp:1373    "strcpy(m_tmpParam.m_text, txt);"
analyze/bullet3/examples/SharedMemory/mujoco/MuJoCoPhysicsClient.cpp:1274    "strcpy(info.m_baseName, bodyJoints->m_baseName.c_str());"
analyze/bullet3/examples/SharedMemory/mujoco/MuJoCoPhysicsClient.cpp:1275    "strcpy(info.m_bodyName, bodyJoints->m_bodyName.c_str());"
analyze/bullet3/examples/SharedMemory/mujoco/MuJoCoPhysicsServerCommandProcessor.cpp:603    "strcpy(serverStatusOut.m_dataStreamArguments.m_bodyName, name);"
analyze/bullet3/examples/SharedMemory/grpc/ConvertGRPCBullet.cpp:1361    "strcpy(serverStatus.m_dataStreamArguments.m_bodyName, grpcReply.requestbodyinfostatus().bodyname().c_str());"
analyze/bullet3/examples/SharedMemory/grpc/ConvertGRPCBullet.cpp:1399    "strcpy(serverStatus.m_dataStreamArguments.m_bodyName, grpcReply.urdfstatus().bodyname().c_str());"
analyze/bullet3/examples/SharedMemory/grpc/ConvertGRPCBullet.cpp:1407    "strcpy(serverStatus.m_dataStreamArguments.m_bulletFileName, grpcReply.urdfstatus().filename().c_str());"
analyze/bullet3/examples/SharedMemory/dart/DARTPhysicsClient.cpp:1273    "strcpy(info.m_baseName, bodyJoints->m_baseName.c_str());"
analyze/bullet3/examples/SharedMemory/dart/DARTPhysicsClient.cpp:1274    "strcpy(info.m_bodyName, bodyJoints->m_bodyName.c_str());"
analyze/bullet3/test/OpenCL/RadixSortBenchmark/main.cpp:628    "strcpy(val, s.c_str());"
analyze/bullet3/test/enet/nat_punchthrough/client/main.cpp:83    "strcpy((char*)&packet->data[strlen("packet")], "foo");"
analyze/bullet3/test/Bullet2/Source/main.cpp:205    "strcpy(gFullPath, argv[0]);"
analyze/bullet3/test/GwenOpenGLTest/OpenGLSample.cpp:322    "if (!(sscanf((const char*)glGetString(GL_VERSION), "%d.%d", &majorGlVersion, &minorGlVersion) == 2))"
analyze/bullet3/Extras/Serialize/makesdna/makesdna.cpp:321    "strcpy(cp, str);"
analyze/bullet3/Extras/Serialize/makesdna/makesdna.cpp:466    "strcpy(cp, name);"
analyze/bullet3/Extras/Serialize/makesdna/makesdna.cpp:1137    "strcpy(str, "SDNA");"
analyze/bullet3/Extras/Serialize/makesdna/makesdna.cpp:1141    "strcpy(str, "NAME");"
analyze/bullet3/Extras/Serialize/makesdna/makesdna.cpp:1154    "strcpy(str, "TYPE");"
analyze/bullet3/Extras/Serialize/makesdna/makesdna.cpp:1168    "strcpy(str, "TLEN");"
analyze/bullet3/Extras/Serialize/makesdna/makesdna.cpp:1176    "strcpy(str, "STRC");"
analyze/bullet3/Extras/Serialize/makesdna/makesdna.cpp:1311    "strcpy(baseDirectory, argv[2]);"
analyze/bullet3/Extras/Serialize/makesdna/makesdna.cpp:1315    "strcpy(baseDirectory, BASE_HEADER);"
analyze/bullet3/Extras/VHACD/test/src/main_vhacd.cpp:479    "fscanf(fid, "%s", temp);"
analyze/bullet3/Extras/VHACD/test/src/main_vhacd.cpp:491    "fscanf(fid, "%i", &nv);"
analyze/bullet3/Extras/VHACD/test/src/main_vhacd.cpp:492    "fscanf(fid, "%i", &nf);"
analyze/bullet3/Extras/VHACD/test/src/main_vhacd.cpp:493    "fscanf(fid, "%i", &ne);"
analyze/bullet3/Extras/VHACD/test/src/main_vhacd.cpp:499    "fscanf(fid, "%f", &(points[p]));"
analyze/bullet3/Extras/VHACD/test/src/main_vhacd.cpp:504    "fscanf(fid, "%i", &s);"
analyze/bullet3/Extras/VHACD/test/src/main_vhacd.cpp:507    "fscanf(fid, "%i", &(triangles[r++]));"
analyze/bullet3/Extras/VHACD/test/src/main_vhacd.cpp:508    "fscanf(fid, "%i", &(triangles[r++]));"
analyze/bullet3/Extras/VHACD/test/src/main_vhacd.cpp:509    "fscanf(fid, "%i", &(triangles[r++]));"
analyze/bullet3/Extras/VHACD/test/src/main_vhacd.cpp:514    "fscanf(fid, "%i", &s);"
analyze/bullet3/Extras/VHACD/src/vhacdMesh.cpp:294    "fscanf(fid, "%s", temp);"
analyze/bullet3/Extras/VHACD/src/vhacdMesh.cpp:305    "fscanf(fid, "%i", &nv);"
analyze/bullet3/Extras/VHACD/src/vhacdMesh.cpp:306    "fscanf(fid, "%i", &nf);"
analyze/bullet3/Extras/VHACD/src/vhacdMesh.cpp:307    "fscanf(fid, "%i", &ne);"
analyze/bullet3/Extras/VHACD/src/vhacdMesh.cpp:314    "fscanf(fid, "%f", &x);"
analyze/bullet3/Extras/VHACD/src/vhacdMesh.cpp:315    "fscanf(fid, "%f", &y);"
analyze/bullet3/Extras/VHACD/src/vhacdMesh.cpp:316    "fscanf(fid, "%f", &z);"
analyze/bullet3/Extras/VHACD/src/vhacdMesh.cpp:324    "fscanf(fid, "%i", &s);"
analyze/bullet3/Extras/VHACD/src/vhacdMesh.cpp:327    "fscanf(fid, "%i", &i);"
analyze/bullet3/Extras/VHACD/src/vhacdMesh.cpp:328    "fscanf(fid, "%i", &j);"
analyze/bullet3/Extras/VHACD/src/vhacdMesh.cpp:329    "fscanf(fid, "%i", &k);"
analyze/bullet3/Extras/VHACD/src/vhacdMesh.cpp:345    "fscanf(fid, "%i", &s);"
analyze/bullet3/src/LinearMath/TaskScheduler/btTaskScheduler.cpp:55    "kScanForJobs,       // actively scan job queue for jobs"
analyze/bullet3/src/LinearMath/TaskScheduler/btTaskScheduler.cpp:387    "if (localStorage->m_directive->getDirective(threadId) == WorkerThreadDirectives::kScanForJobs)"
analyze/bullet3/src/LinearMath/TaskScheduler/btTaskScheduler.cpp:399    "if (localStorage->m_directive->getDirective(threadId) == WorkerThreadDirectives::kScanForJobs || !jobQueue->isQueueEmpty())"
analyze/bullet3/src/LinearMath/TaskScheduler/btTaskScheduler.cpp:601    "btAssert(m_workerDirective->getDirective(1) == WorkerThreadDirectives::kScanForJobs);"
analyze/bullet3/src/LinearMath/TaskScheduler/btTaskScheduler.cpp:653    "setWorkerDirectives(WorkerThreadDirectives::kScanForJobs);"
analyze/bullet3/src/Bullet3OpenCL/ParallelPrimitives/b3PrefixScanFloat4CL.cpp:1    "#include "b3PrefixScanFloat4CL.h""
analyze/bullet3/src/Bullet3OpenCL/ParallelPrimitives/b3PrefixScanFloat4CL.cpp:3    "#define B3_PREFIXSCAN_FLOAT4_PROG_PATH "src/Bullet3OpenCL/ParallelPrimitives/kernels/PrefixScanFloat4Kernels.cl""
analyze/bullet3/src/Bullet3OpenCL/ParallelPrimitives/b3PrefixScanFloat4CL.cpp:9    "b3PrefixScanFloat4CL::b3PrefixScanFloat4CL(cl_context ctx, cl_device_id device, cl_command_queue queue, int size)"
analyze/bullet3/src/Bullet3OpenCL/ParallelPrimitives/b3PrefixScanFloat4CL.cpp:28    "b3PrefixScanFloat4CL::~b3PrefixScanFloat4CL()"
analyze/bullet3/src/Bullet3OpenCL/ParallelPrimitives/b3PrefixScanFloat4CL.cpp:45    "void b3PrefixScanFloat4CL::execute(b3OpenCLArray<b3Vector3>& src, b3OpenCLArray<b3Vector3>& dst, int n, b3Vector3* sum)"
analyze/bullet3/src/Bullet3OpenCL/ParallelPrimitives/b3PrefixScanFloat4CL.cpp:95    "void b3PrefixScanFloat4CL::executeHost(b3AlignedObjectArray<b3Vector3>& src, b3AlignedObjectArray<b3Vector3>& dst, int n, b3Vector3* sum)"
analyze/bullet3/src/Bullet3OpenCL/BroadphaseCollision/b3GpuSapBroadphase.cpp:7    "#include "Bullet3OpenCL/ParallelPrimitives/b3PrefixScanFloat4CL.h""
analyze/bullet3/src/Bullet3OpenCL/BroadphaseCollision/b3GpuSapBroadphase.cpp:55    "class b3PrefixScanFloat4CL*		m_prefixScanFloat4;"
analyze/bullet3/src/Bullet3OpenCL/BroadphaseCollision/b3GpuSapBroadphase.cpp:102    "m_prefixScanFloat4 = new b3PrefixScanFloat4CL(m_context, m_device, m_queue);"
analyze/bullet3/src/Bullet3OpenCL/BroadphaseCollision/b3GpuSapBroadphase.cpp:104    "m_prefixScanFloat4 = 0;"
analyze/bullet3/src/Bullet3OpenCL/BroadphaseCollision/b3GpuSapBroadphase.cpp:162    "delete m_prefixScanFloat4;"
analyze/bullet3/src/Bullet3OpenCL/BroadphaseCollision/b3GpuSapBroadphase.cpp:1018    "if (m_prefixScanFloat4 && numSmallAabbs)"
analyze/bullet3/src/Bullet3OpenCL/BroadphaseCollision/b3GpuSapBroadphase.cpp:1043    "m_prefixScanFloat4->execute(m_sum, m_dst, numSmallAabbs + 1, &s);"
analyze/bullet3/src/Bullet3OpenCL/BroadphaseCollision/b3GpuSapBroadphase.cpp:1044    "m_prefixScanFloat4->execute(m_sum2, m_dst, numSmallAabbs + 1, &s2);"
analyze/bullet3/src/BulletSoftBody/btSoftBodyHelpers.cpp:1154    "int result = sscanf(node, "%d %d %d %d", &nnode, &ndims, &nattrb, &hasbounds);"
analyze/bullet3/src/BulletSoftBody/btSoftBodyHelpers.cpp:1155    "result = sscanf(node, "%d %d %d %d", &nnode, &ndims, &nattrb, &hasbounds);"
analyze/bullet3/src/BulletSoftBody/btSoftBodyHelpers.cpp:1164    "sscanf(node, "%d %f %f %f", &index, &x, &y, &z);"
analyze/bullet3/src/BulletSoftBody/btSoftBodyHelpers.cpp:1210    "sscanf(ele, "%d %d %d", &ntetra, &ncorner, &neattrb);"
analyze/bullet3/src/BulletSoftBody/btSoftBodyHelpers.cpp:1221    "sscanf(ele, "%d %d %d %d %d", &index, &ni[0], &ni[1], &ni[2], &ni[3]);"
